// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  role       Role
  identifier String   @unique // e.g., C123, D456, A789
  email      String?  // Optional email field
  images     Image[]
  comments   Comment[] @relation("UserComments")
  createdAt  DateTime @default(now())
  clientImages Image[] @relation("ClientImages")
  revisionRulesConfirmed Boolean @default(false)
}

model Image {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  url           String      // Cloudinary URL
  publicId      String      // Cloudinary public_id
  uploaderId    String
  uploader      User        @relation(fields: [uploaderId], references: [id])
  clientId      String
  client        User        @relation("ClientImages", fields: [clientId], references: [id])
  clientName    String
  designTypeId  String
  designType    DesignType  @relation(fields: [designTypeId], references: [id])
  comments      Comment[]   @relation("ImageComments")
  createdAt     DateTime    @default(now())
  // Approval system fields
  status        ApprovalStatus @default(PENDING)
  clientFeedback String?
  approvedAt    DateTime?
  rejectedAt    DateTime?
  rejectionReason String? // Reason for rejection
  // Technical info
  format        String?
  bytes         Int?
  width         Int?
  height        Int?
  revisionRequestCount Int @default(0)
  revisionRequests RevisionRequest[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], name: "ImageComments")
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], name: "UserComments")
  content   String
  createdAt DateTime @default(now())
  // Threaded replies
  parentId  String?  // Self-referencing for replies
  parent    Comment? @relation("CommentParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("CommentParent")
  // Moderation
  isDeleted Boolean  @default(false)
  // NEW FIELDS
  designerId String
  authorRole Role
}

enum Role {
  CLIENT
  DESIGNER
  ADMIN
}

model DesignType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  images      Image[]
  createdAt   DateTime @default(now())
}

// MANUAL MIGRATION STEPS:
// 1. Remove the old DesignType enum from your DB (if needed)
// 2. Create the new DesignType collection/table
// 3. Update all Image records to reference designTypeId (not enum)
// 4. Update your backend/frontend to use the new model

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_REQUESTED
}

model RevisionRule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value String
}

model RevisionRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id])
  clientId  String
  designerId String
  feedback  String
  status    String   @default("PENDING")
  doneAt    DateTime?
  createdAt DateTime @default(now())
}
